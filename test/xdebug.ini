[xdebug]
; Location of the extention to load
zend_extension = xdebug.so

; xdebug.remote_enable
;
; Type: boolean, Default value: 0
;
; This switch controls whether Xdebug should try to contact a debug client which is listening on the host and port as
; set with the settings xdebug.remote_host and xdebug.remote_port. If a connection can not be established the script will
; just continue as if this setting was 0.
xdebug.remote_enable = 1

; xdebug.remote_connect_back
;
; Type: boolean, Default value: 0, Introduced in Xdebug >= 2.1
;
; If enabled, the xdebug.remote_host setting is ignored and Xdebug will try to connect to the client that made the HTTP
; request. It checks the $_SERVER['HTTP_X_FORWARDED_FOR'] and $_SERVER['REMOTE_ADDR'] variables to find out which IP
; address to use.
;
; Please note that there is no filter available, and anybody who can connect to the webserver will then be able to start
; a debugging session, even if their address does not match xdebug.remote_host.
xdebug.remote_connect_back = on

; xdebug.remote_host
;
; Type: string, Default value: localhost
;
; Selects the host where the debug client is running, you can either use a host name, IP address, or
; 'unix:///path/to/sock' for a Unix domain socket. This setting is ignored if xdebug.remote_connect_back is enabled.
;
; Support for Unix domain sockets was introduced in Xdebug 2.6.
xdebug.remote_host = 192.168.33.1

; xdebug.remote_port
;
; Type: integer, Default value: 9000
;
; The port to which Xdebug tries to connect on the remote host. Port 9000 is the default for both the client and the
; bundled debugclient. As many clients use this port number, it is best to leave this setting unchanged.
xdebug.remote_port = 8001

; xdebug.profiler_output_dir
;
; Type: string, Default value: /tmp
;
; The directory where the profiler output will be written to, make sure that the user who the PHP will be running as has
; write permissions to that directory. This setting can not be set in your script with ini_set().
xdebug.profiler_output_dir = /opt/log/xdebug/

; xdebug.remote_log
;
; Type: string, Default value:
;
; If set to a value, it is used as filename to a file to which all remote debugger communications are logged. The file is
; always opened in append-mode, and will therefore not be overwritten by default. There is no concurrency protection
; available. The format of the file looks something like:
;
; Log opened at 2007-05-27 14:28:15
; -> <init xmlns="urn:debugger_protocol_v1" xmlns:xdebug="http://xdebug.org/dbgp/x ... ight></init>
;
; <- step_into -i 1
; -> <response xmlns="urn:debugger_protocol_v1" xmlns:xdebug="http://xdebug.org/db ... ></response>
xdebug.remote_log = /opt/log/xdebug/remote

; xdebug.trace_output_dir
;
; Type: string, Default value: /tmp
;
; The directory where the tracing files will be written to, make sure that the user who the PHP will be running as has
; write permissions to that directory.
xdebug.trace_output_dir = /opt/log/xdebug

; xdebug.profiler_enable_trigger
;
; Type: integer, Default value: 0
;
; When this setting is set to 1, you can trigger the generation of profiler files by using the XDEBUG_PROFILE GET/POST
; parameter, or set a cookie with the name XDEBUG_PROFILE. This will then write the profiler data to defined directory.
; In order to prevent the profiler to generate profile files for each request, you need to set xdebug.profiler_enable to
; 0. Access to the trigger itself can be configured through xdebug.profiler_enable_trigger_value.
xdebug.profiler_enable_trigger = 1
